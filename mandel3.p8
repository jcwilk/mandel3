pico-8 cartridge // http://www.pico-8.com
version 29
__lua__

function _init()
  colors={1,2,5,4,3,13,9,8,14,6,15,12,11,10,7}

  orig_field_of_view=1/6
  orig_draw_distance=6
  orig_turn_amount=.005
  orig_speed = .05

  --debug stuff, disable for release
  force_draw_width=false
  debug=false
  --

  largest_width=0
  max_screenx_offset=0
  skipped_columns=0

  field_of_view=orig_field_of_view -- 45*
  draw_distance=orig_draw_distance
  turn_amount=orig_turn_amount
  speed = orig_speed
  height_zoom_ratio = 1.05
  screen_width = -sin(field_of_view/2) * 2

  max_iterations = 20
  max_wall_height = 0.5
  player_height = 0.3

  player = {
    coords=makevec2d(-0.5,0),
    bearing=makeangle(0)
  }
end

function _update60()
  local offset = makevec2d(0,0)
  local facing = player.bearing:tovector()
  changed_position=false
  if btn(0) then
    changed_position=true
    player.bearing-=turn_amount
  end
  if btn(1) then
    changed_position=true
    player.bearing+=turn_amount
  end
  if btn(2) then
    changed_position=true
    offset+=facing
  end
  if btn(3) then
    changed_position=true
    offset-=facing
  end
  if btn(4) then
    changed_position=true
    player_height/= height_zoom_ratio
  end
  if btn(5) then
    changed_position=true
    player_height*= height_zoom_ratio
  end

  player.coords+= offset*speed*player_height

  tick_bearing_v()
end

function tick_bearing_v()
  if abs(player_bearing_v) > .0005 then
    player_bearing_v-= tounit(player_bearing_v)*.0005
    player.bearing+=player_bearing_v
  end
end

function _draw()
  draw_background()

  raycast_walls()

  if debug then
    debug_info()
  end
end

function debug_info()
  --printh("DEBUG")
  --printh(player.bearing.val)
  --printh(tostr(player.coords.x)..","..tostr(player.coords.y))
  printh(stat(7))
  printh(stat(1))
end

function draw_background()
  rectfill(0,0,127,63,sky_color)
  rectfill(0,64,127,127,ground_color)
  draw_stars()
end

function draw_stars()
  --TODO fuckin thing sucks
  local x,y,angle
  color(7)
  angle=player.bearing-field_of_view/2
  local init=flr(angle.val*100)
  local final=flr((angle.val+field_of_view)*100)
  for i=init,final do
    pset((i-init)/100/field_of_view*128,64-((i*19)%64)*orig_field_of_view/field_of_view)
  end
end

function raycast_walls()
  local pv
  local slope
  local seenwalls={}
  local found,distance
  local screenx=0
  local buffer_percent=.2
  local start_time=stat(1)
  local skipped_columns=0 --global?

  local total_time
  if changed_position then
    cached_grid={}
    total_time=1
  else
    total_time=2
  end
  --total_time-=.25

  local alotted_time=total_time-start_time
  local buffer_time=buffer_percent*alotted_time
  start_time+=buffer_time
  alotted_time-=buffer_time

  local draw_width
  largest_width=0
  local angle_from_ground = 1/4 - field_of_view/2
  local start_distance=player_height * sin(angle_from_ground) / cos(angle_from_ground) * -0.03
  --printh(start_distance)

  while screenx<=127 do
    behind_time=stat(1)-(start_time+screenx/127*alotted_time-buffer_time)
    draw_width=128*behind_time/alotted_time
    draw_width=flr(mid(1,8,draw_width))
    if force_draw_width then
      draw_width=force_draw_width
    end
    largest_width=max(largest_width,draw_width)
    skipped_columns+=draw_width-1

    last_tile_occupied=false

    pa=screenx_to_angle(screenx+(draw_width-1)/2)
    pv=pa:tovector()
    --printh("vec"..tostr(pv.x)..","..tostr(pv.y))

    found=false

    distance=start_distance
    step_ratio=1.1
    local height
    local distance_to_pixel_col = 1 / cos((pa-player.bearing).val)
    local lowest_y = 128
    --printh(distance)
    debugged=false
    local current_draw_distance=draw_distance*player_height
    local current_max_iterations=max_iterations
    local blocker_ratio=false

    while not found and distance < current_draw_distance do

      iterations = mandelbrot(player.coords.x+pv.x*distance, player.coords.y+pv.y*distance, current_max_iterations, distance)
      height = max_wall_height*(1-iterations/max_iterations)
      relative_height = height - player_height
      screen_distance_from_center = relative_height * distance_to_pixel_col/distance
      if debug and screenx == 64 and not debugged then
        debugged=true
        --printh("screenx")
        --printh(distance_to_pixel_col)
      end
      pixels_from_center = 128 * screen_distance_from_center/screen_width
      screeny = round(63.5 - pixels_from_center)

      if screeny < lowest_y then
        blocker_ratio = relative_height / distance

        if relative_height > 0 then
          current_draw_distance=distance * (max_wall_height-player_height)/relative_height
        end

        rectfill(screenx, lowest_y-1, screenx+draw_width-1, screeny, colors[1+flr((iterations/max_iterations)^2*15)])
        lowest_y = screeny
      end

      distance*=step_ratio
      if blocker_ratio then
        min_height = player_height + blocker_ratio * distance
        current_max_iterations = max_iterations * (-1 * min_height / max_wall_height + 1)
      end
    end

    screenx+=draw_width
  end
end

cached_grid={}
function mandelbrot(x, y, current_max_iterations, distance)
  grid_scale=10/player_height/distance
  --grid_scale=20
  x=round(grid_scale*x)/grid_scale
  y=round(grid_scale*y)/grid_scale
  local key=tostr(x,true)..tostr(y,true)
  if cached_grid[key] then
    return cached_grid[key]
  end

  -- if true then
  --   return 16-mid(1,15,10*(abs(x)+abs(y)))
  --   --return 8
  -- end

  local zx=0
  local zy=0
  local xswap

  local i=0
  while i < current_max_iterations and abs(zx) < 2 and abs(zy) < 2 do
    i+= 1

    xswap = zx*zx - zy*zy + x
    zy = (zy + zy)*zx + y
    zx = xswap
  end

  cached_grid[key] = i

  return i
end

function screenx_to_angle(screenx)
  local offset_from_center_of_screen = (screenx - 127/2) * screen_width/128
  return makeangle(player.bearing.val+atan2(offset_from_center_of_screen, 1)+1/4)
end

--NB - not currently used
function angle_to_screenx(angle)
  local offset_from_center_of_screen = -sin(angle.val-player.bearing.val)
  return round(offset_from_center_of_screen/screen_width * 128 + 127/2)
end

makeangle = (function()
  local mt = {
    __add=function(a,b)
      if type(a) == "table" then
        a=a.val
      end
      if type(b) == "table" then
        b=b.val
      end
      local val=a+b

      if val < 0 then
        val = abs(flr(val))+val
      elseif val >= 1 then
        val = val%1
      end
      return makeangle(val)
    end,
    __sub=function(a,b)
      if type(b) == "number" then
        return a+makeangle(-b)
      else
        return a+makeangle(-b.val)
      end
    end
  }
  local function angle_tovector(a)
    return makevec2d(cos(a.val-.25),sin(a.val-.25))
  end
  return function(angle)
    local t={
      val=angle,
      tovector=angle_tovector
    }
    setmetatable(t,mt)
    return t
  end
end)()

makevec2d = (function()
  mt = {
    __add = function(a, b)
      return makevec2d(
        a.x + b.x,
        a.y + b.y
      )
    end,
    __sub = function(a,b)
      return a+makevec2d(-b.x,-b.y)
    end,
    __mul = function(a, b)
      if type(a) == "number" then
        return makevec2d(b.x * a, b.y * a)
      elseif type(b) == "number" then
        return makevec2d(a.x * b, a.y * b)
      else
        return a.x * b.x + a.y * b.y
      end
    end,
    __div = function(a,b)
      return a*(1/b)
    end,
    __eq = function(a, b)
      return a.x == b.x and a.y == b.y
    end
  }
  local function vec2d_tostring(t)
    return "(" .. t.x .. ", " .. t.y .. ")"
  end
  local function magnitude(t)
    return sqrt(t.x*t.x+t.y*t.y)
  end
  local function bearing(t)
    return makeangle(atan2(t.x,t.y))+.25
  end
  local function diamond_distance(t)
    return abs(t.x)+abs(t.y)
  end
  local function normalize(t)
    return t/t:tomagnitude()
  end
  local function project_onto(t,direction)
    local dir_mag=direction:tomagnitude()
    return ((direction*t)/(dir_mag*dir_mag))*direction
  end
  local function cross_with(t,vector)
    -- signed magnitude of 3d cross product
    return t.x*vector.y-t.y*vector.x
  end
  return function(x, y)
    local t = {
    x=x,
    y=y,
    tostring=vec2d_tostring,
    tobearing=bearing,
    tomagnitude=magnitude,
    diamond_distance=diamond_distance,
    project_onto=project_onto,
    cross_with=cross_with,
    normalize=normalize
    }
    setmetatable(t, mt)
    return t
  end
end)()

function round(n)
  return flr(n+0.5)
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
52222222255505555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
52222222255505555500000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000
52222222255555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44222222255555555555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700000
44222222255555555555555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44222222255555555555555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44222222255555555555555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44222222255555555555555555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44222222255555555555555555555522202222200000000000000000000000000000070000000000000000000000000000000000000000000000000000000000
44222222255555555555555555555522202222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44222222255555555555555555555522222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44222222255555555555555555555522222222222222222222222222220000000000000000000000000000000000000000000000000000000000000000000000
44222222255555555555555555555542222222222222222222222222222000000000000000000000000000000000000000000000000000000000000000000000
44222222255555555555555555555542222222222222222222222222222000000000000000000000000000000000000000000000000000000000000000000000
44222222255555555555555555555542222222222222222222222222222555555000000000000000000000000000000000000000000000000000000000000000
44222222255555555555555555555542222222222444222222222222222555555000000000000000000000000000700000000000000000000000000000000000
44d22222255555555555555555555542222222222444222222222222222555555555550000000000000000000000000000000000000000000000000000000000
44d22222255555555555555555555542222222224444222222222222222555555555550000000000000000000000000000000000000000000000000000000000
44d22222255555555555555555555542222222224444422222222222222555555555555500000000000000000000000000000000000000000000000000000000
44d22222255555555555555555555542222222224444422222222222222555555555555500000000000000000000000000000000000000000000000000000000
44d22222255555555555555555555542222222224444422222222222222555555555555550000000000000000000000000000000000000000000000000000000
44d22222255555555555555555555542222222224444422222222222222555555555555550000000000000000000000000000000000000000000000000000000
44d22222255555555555555555555542223222224444422222222222222555555555555550000000000000000000000000000000000000000007000000000000
44d22222255555555555555555555542223222224444432222222222222555555555555550000000000000000000000000000000000000000000000000000000
44d22222255555555555555555555543223222224444432222222222222555555555555554000000000000000000000000000000000000000000000000000000
44d22222255555555555555555555543223322224444433222222222222555555555555554000000000000000000000000000000000000000000000000000000
44d22222255555555555555555555543223322224444433222222222222555555555555554000000000000000000000000000000000000000000000000000000
44d22222255555555555555555555543223322224444433222222222222555555555555554220000000000000000000000000000000000000000000000000000
44d22222255555555555555555555543223322224444433222222222222555555555555554220000000000000000000000000000000000000000000000000000
44d22222255555555555555555555543223322224444433222222222222555555555555554225550000000000000000000000000000000000000000000000000
44d22222255955555555555555555543223322224444433222222222222555555555555554225555000000000000000000000000000000000000000000000000
44d22222255955555555555555555543223322224444433222222222222555555555555554225555520000000000000000000000000000000000000000000000
44d22222255955555555555555555543223322224444433222222222222555555555555554244555522222222200000020000000000000000000000000000000
44d22222255995555555555555555543223322224444433d22222222222555555555555554244555552222222222222220000000000000000000000000000000
44d22222255995555555555555555543223322224444433d22222222222555555555555554344355552222222222222225500000000000000000000000000000
44d22222255995555555555555555543223322224444433d22222222222555555555555554344355552222222222222225550000000000000000000000000000
44d22222255995555555555555555543223322224444433d22222222222555555555555554344355552222222222222225555000000000000000000000000000
44d22222255995555555555555555543293322224444433d22222222222555555555555554344355552222222222222225555550000000000000000000000000
44d22222255995555555555555555543293322224444433d22222222222555555555555554344355552322222222222225555554000000000000000000000000
44d22222255995555555555555555543293322224444433d22222222222555555555555554344355552322222222222225555554000000000000000000044440
44d22222255995555555555555555543293322224444433d22222222222555555555555554344355552332222222222225555554000000000000000000044440
44d22222255995555555555555555543293322224444433d22222222222555555555555554344355552332222222222225555554400700000000000000044440
44d22222255995555555555555555543293322224444433d222222222225555555555555543443d5552332222222222225555554400000000000000000044440
44d22222255995555555555555555543293322224444433d222222222225555555555555543443d5552332222222222225555554400000000000000000044443
44d22222255995555555555555555543293322224444433d222222222225555555555555543443d555d332222222222225555554400000000000000000044443
44d22222255995555555555555555543293322284444433d222222222225555555555555543443d555d332222222222225555554400000000000000000044443
44d22222255995555555555555555543293322284444433d222222222225555555555555543443d555d332222222222225555554400000000000000000d44443
44d22222255995555555555555555543293322284444433d222222222225555555555555543443d555d3322222222222255555544d0000000000000000d44443
44d22222255995555555555555555543293322284444433d222222222225555555555555543443d555d3322222222222255555544d0000000000000000d44443
44d2ee22255995555555555555555543293322284444433d222222222225555555555555543443d555d3322222222222255555544d0000000000000000d44443
44d2ee22255995555555555555555543293382284444433d222222222225555555555555543443d555d3392222222222255555544d0000000000000000d44443
44d2ee22255995555555555555555543293382284444433d222222222225555555555555543443d555d3392222222222255555544d0000000000000000d44443
44d2ee22255995555555555555555543293382284444433d222222222225555555555555543443d555d3392222222222255555544d0000000000000000d44443
44d2ee22255995555555555555555543293382284444433d222222222225555555555555543443d555d3392222222222255555544d0000000000000000d44443
44d2ee22255995555555555555555543293382284444433d222222222225555555555555543443d555d3392222222222255555544d8000000000000000d44443
44d2ee22255995555555555555555543293382284444433d222222222225555555555555543443d555d3392222222222255555544d8000000000000000d44443
44d2ee22255995555555555555555543293382284444433d222222222225555555555555543443d555d3392222222222255555544d8000000000000000d44443
44d2ee22255995555555555555555543293382284444433d222222222225555555555555543443d555d3392222222222255555544d8000000000000000d44443
44d2ee22255995555555555555555543293382284444433d222222222225555555555555543443d555d3392222222222255555544d8000000000000000d44443
44d2ee22255995555555555555555543293382284444433d222222222225555555555555543443d555d3392222222222255555544d8000000000000000d44443
44d2ee22255995555555555555555543293382284444433d22222e222225555555555555543443d555d3392222222222255555544d8000000000000000d44443
44d2ee22255995555555555555555543293382284444433d22222e222225555555555555543443d555d339222222222e255555544d8000000000000000d44443
44d2ee22256996555555555555555543293386684444433d22222e222225555555555555543443d555d339222222222e255555544d8000000000000000d44443
44d2ee22256996555555555555555543293386684444433d22222e222225555555555555543443d555d339222222222e255555544d8000000000000600d44443
44d2ee22256996555555555555555543293386684444433d22222e222225555555555555543443d555d339222222222e255555544d8000000000000600d44443
44d2ee22256996555555555555555543293386684444433d22222e222225555555555555543443d555d339222222222e255555544d8000000000000600d44443
44d2ee22256996555555555555555543293386684444433d22222e222225555555555555543443d555d339222222222e255555544d8000000000000600d44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d339222222222e255555544d8000000000000600d44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d339222222222e255555544d800000000000f600d44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d339222222222e255555544d8f0000000000f600d44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d339222222222e255555544d8f0000000000f600d44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d339222222222e255555544d8f0000000000f600d44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d339222222222e255555544d8f0000000000f600d44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d339222222222e255555544d8f0000000000f600d44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d339222222222ec55555544d8f0000000000f600d44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d339222222222ec55555544d8f0000000000f600d44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d339222222222ec55555544d8f0000000000f600d44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d339222222222ec55555544d8f0000000000f60bd44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d339222222222ec55555544d8f0000000000f60bd44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d339222222222ec55555544d8f0000000000f60bd44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d3392b2222222ec55555544d8f0000000000f60bd44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d3392b2222222ec55555544d8f0000000000f60bd44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d3392b2222222ec55555544d8f0000000000f60bd44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d3392b2222222ec55555544d8f0000000000f60bd44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d3392b2222222ec55555544d8f0000000000f60bd44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d3392b2222222ec55555544d8f0000000000f60bd44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d3392b2222222ec55555544d8f0000000000f60bd44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d3392b2222222ec55555544d8f0000000000f60bd44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d3392b2222222ec55555544d8f0000000000f60bd44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d3392b2222222ec55555544d8f0000000000f60bd44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d3390b0000000ec00000544d8f0000000000f60bd44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d3390b0000000ec000000000000000000000f60bd44443
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d3390b0000000ec0000000000000000000000000000000
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d3390b0000000ec0000000000000000000000000000000
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d555d3390b0000000ec0000000000000000000000000000000
44d2ee22256996555555555555555543293386684444433d22222e226225555555555555543443d0000000000000000ec0000000000000000000000000000000
44d2ee22256996555555555555555543293386684444433d222a2e226225555555555555543443d0000000000000000000000000000000000000000000000000
44d2ee22256996555555555555555543a93386684444433d222a2e226225555555555555543443d0000000000000000000000000000000000000000000000000
44d2ee22256996555555555555555543a93386684444433d222a2e226225555555555555543443d0000000000000000000000000000000000000000000000000
44d2ee22256996555555555555555543a93386684444433d222a2e226225555555555555543443d0000000000000000000000000000000000000000000000000
44d2ee22256996555555555555555543a93386684444433d222a2e226225555555555555543443d0000000000000000000000000000000000000000000000000
44d2ee22256996555555555555555543a93386684444433d222a2e22622555555555555554000000000000000000000000000000000000000000000000000000
44d2ee22256996555555555555555543a93386684444433d222a2e22622555555555555554000000000000000000000000000000000000000000000000000000
44d2ee22256996555555555555555543a93386684444433d222a2e22622555555555555554000000000000000000000000000000000000000000000000000000
44d2ee22256996555555555555555543a93386684444433d222a2e22622555555555555554000000000000000000000000000000000000000000000000000000
44d2ee22256996555555555555555543a93386684444433d222a2e22622555555555555554000000000000000000000000000000000000000000000000000000
44d2ee22256996555555555555555543a93386684444433d222a2e22622555555555555554000000000000000000000000000000000000000000000000000000
44d2ee22256996555555555555555543a93386684444433d222a2e22622555555555555554000000000000000000000000000000000000000000000000000000
44d2ee2225699655a555555555555543a93386684444433d222a0e00600000000000000000000000000000000000000000000000000000000000000000000000
44d2ee2225699655a555555555555543a93386684444433d000a0e00600000000000000000000000000000000000000000000000000000000000000000000000
44d2ee2225699655a555555555555543a93386684444433d000a0e00600000000000000000000000000000000000000000000000000000000000000000000000
44d2ee2225699655a555555555555543a93386684444433d000a0e00600000000000000000000000000000000000000000000000000000000000000000000000
44d2ee2225699655a555555555555543a93386684444433d000a0e00600000000000000000000000000000000000000000000000000000000000000000000000
44d7ee2225699655a555555555555543a93386684444433d000a0e00600000000000000000000000000000000000000000000000000000000000000000000000
44d7ee2225699655a555555555555543a93386684444433d000a0e00600000000000000000000000000000000000000000000000000000000000000000000000
44d7ee2225699655a555555555555543a93386684444433d000a0e00600000000000000000000000000000000000000000000000000000000000000000000000
44d7ee2225699655a555555555555543a93386684444433d000a0e00600000000000000000000000000000000000000000000000000000000000000000000000
44d7ee2225699655a555555555555543a93386684444433d00000000000000000000000000000000000000000000000000000000000000000000000000000000
44d7ee2225699655a555555555555543a93300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44d7ee2225699655a555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44d7ee2225699655a500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44d7ee2225699600a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44d7ee0000699600a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44d7ee0000699600a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44d7ee0000699600a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44d7ee0000699600a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44d7ee0000699600a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44d7ee0000699600a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

